apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  serviceName: kafka-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kafka
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: kafka
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          ports:
            - name: broker
              containerPort: {{ .Values.ports.broker }}
              protocol: TCP
            - name: controller
              containerPort: {{ .Values.ports.controller }}
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLUSTER_ID
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: clusterId
            - name: KAFKA_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:{{ .Values.ports.broker }},CONTROLLER://0.0.0.0:{{ .Values.ports.controller }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://$(POD_NAME).{{ .Values.cluster.domain }}:{{ .Values.ports.broker }}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "{{ range $i, $e := until (int .Values.replicaCount) }}{{ $i }}@kafka-{{ $i }}.{{ $.Values.cluster.domain }}:{{ $.Values.ports.controller }}{{ if ne $i (sub (int $.Values.replicaCount) 1) }},{{ end }}{{ end }}"
            - name: KAFKA_LOG_DIRS
              value: "/kafka/data"
            - name: KAFKA_LOG4J_OPTS
              value: "-Dlog4j.configuration=file:/etc/kafka/log4j2.properties"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.ports.broker }}
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 6
          livenessProbe:
            tcpSocket:
              port: {{ .Values.ports.broker }}
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 8
          volumeMounts:
            - name: kafka-data
              mountPath: /kafka/data
            - name: kafka-config
              mountPath: /etc/kafka/log4j2.properties
              subPath: log4j2.properties
          command: ["/bin/bash", "-c"]
          args:
            - |
              mkdir -p /kafka/data/logs
              chmod -R 770 /kafka/data/logs
              exec /etc/confluent/docker/run
      volumes:
        - name: kafka-config
          configMap:
            name: kafka-config
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        storageClassName: {{ .Values.persistence.storageClass }}
        accessModes:
          {{- toYaml .Values.persistence.accessModes | nindent 10 }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}