apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: kafka-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: {{ .Values.image }}
          ports:
            - containerPort: {{ .Values.port.broker }}
            - containerPort: {{ .Values.port.controller }}
          resources: {{ .Values.resources | toYaml | nindent 10 }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLUSTER_ID
              value: {{ .Values.clusterId }}
            - name: KAFKA_NODE_ID
              value: "$(echo $POD_NAME | sed 's/kafka-//')"
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:{{ .Values.port.broker }},CONTROLLER://:{{ .Values.port.controller }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-$(KAFKA_NODE_ID).kafka-headless:{{ .Values.port.broker }}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "0@kafka-0.kafka-headless:{{ .Values.port.controller }},1@kafka-1.kafka-headless:{{ .Values.port.controller }},2@kafka-2.kafka-headless:{{ .Values.port.controller }}"
            - name: KAFKA_LOG_DIRS
              value: "/bitnami/kafka/data"  # Путь внутри контейнера
            - name: BITNAMI_DEBUG
              value: "true"
          command: ["/bin/bash", "-c"]
          args:
            - |
              # Форматирование storage если нужно (только первый запуск)
              if [ ! -f /bitnami/kafka/data/meta.properties ]; then
                /opt/kafka/bin/kafka-storage.sh format -t $CLUSTER_ID -c /opt/kafka/config/kraft/server.properties --config /opt/kafka/config/kraft/server.properties
              fi
              # Запуск сервера
              /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/kraft/server.properties \
                --override process.roles=$KAFKA_PROCESS_ROLES \
                --override node.id=$KAFKA_NODE_ID \
                --override listeners=$KAFKA_LISTENERS \
                --override advertised.listeners=$KAFKA_ADVERTISED_LISTENERS \
                --override listener.security.protocol.map=$KAFKA_LISTENER_SECURITY_PROTOCOL_MAP \
                --override inter.broker.listener.name=$KAFKA_INTER_BROKER_LISTENER_NAME \
                --override controller.listener.names=$KAFKA_CONTROLLER_LISTENER_NAMES \
                --override controller.quorum.voters=$KAFKA_CONTROLLER_QUORUM_VOTERS \
                --override log.dirs=$KAFKA_LOG_DIRS
          volumeMounts:
            - name: kafka
              mountPath: /bitnami/kafka/data
          livenessProbe:
            tcpSocket:
              port: {{ .Values.port.broker }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: {{ .Values.port.broker }}
            initialDelaySeconds: 15
            periodSeconds: 5
      volumes:
        - name: kafka
          persistentVolumeClaim:
            claimName: kafka-data-kafka-$(echo $POD_NAME | sed 's/kafka-//')
  volumeClaimTemplates:
    - metadata:
        name: kafka
      spec:
        storageClassName: {{ .Values.persistence.storageClass }}
        accessModes: {{ .Values.persistence.accessModes }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}