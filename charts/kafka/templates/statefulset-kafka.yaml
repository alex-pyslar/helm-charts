apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-kafka
spec:
  serviceName: {{ .Release.Name }}-kafka
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-kafka
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-kafka
    spec:
      containers:
      - name: kafka
        image: {{ .Values.kafka.image }}
        ports:
        - containerPort: {{ .Values.kafka.port }}
          name: kafka
        readinessProbe:
          tcpSocket:
            port: {{ .Values.kafka.port }}
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 6
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{{ .Release.Name }}-zookeeper:{{ .Values.zookeeper.port }}"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://{{ .Release.Name }}-kafka:{{ .Values.kafka.port }},EXTERNAL://<node-ip>:{{ .Values.kafka.nodePort }}"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:{{ .Values.kafka.port }},EXTERNAL://0.0.0.0:{{ .Values.kafka.nodePort }}"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_SERVER_PROPERTIES
          value: /etc/kafka/server.properties
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka/data
        - name: kafka-config
          mountPath: /etc/kafka
      volumes:
      - name: kafka-config
        configMap:
          name: {{ .Release.Name }}-kafka-config
          items:
          - key: kafka-server-properties
            path: server.properties
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.kafka.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.kafka.persistence.size }}